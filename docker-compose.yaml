services:
  gateway-api:
    image: grumpycatyocollab/ghost-hunters-gateway:latest
    platform: ${PLATFORM}
    container_name: gateway-api
    ports:
      - "${GATEWAY_API_EXPOSED_PORT}:${GATEWAY_API_EXPOSED_PORT}"
    volumes:
      - ./gateway:/app
    env_file:
      - .env
    environment:
      API_ENV: ${API_ENV}
      LOG_LEVEL: ${LOG_LEVEL}
      SECRET_KEY: ${SECRET_KEY}
      GATEWAY_REDIS_HOST: ${GATEWAY_REDIS_HOST}
      GATEWAY_REDIS_PORT: ${GATEWAY_REDIS_PORT}
      GATEWAY_REDIS_DB: ${GATEWAY_REDIS_DB}
      TASK_TIMEOUT: ${TASK_TIMEOUT}
      CONCURRENT_TASK_LIMIT: ${CONCURRENT_TASK_LIMIT}
      DISCOVERY_SERVICE_URL: ${DISCOVERY_SERVICE_URL}
      GATEWAY_HOST: ${GATEWAY_HOST}
      GATEWAY_PORT: ${GATEWAY_PORT}
    command: uvicorn main:app --host 0.0.0.0 --port ${GATEWAY_API_EXPOSED_PORT} --reload
    depends_on:
      gateway-redis:
        condition: service_healthy
      discovery-service:
        condition: service_healthy

  gateway-redis:
    image: redis:7-alpine
    platform: ${PLATFORM}
    container_name: gateway-redis
    command: redis-server --port ${GATEWAY_REDIS_PORT}
    ports:
      - "${GATEWAY_REDIS_PORT}:${GATEWAY_REDIS_PORT}"
    volumes:
      - gateway_redis_data:/data
    env_file:
      - .env
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "${GATEWAY_REDIS_PORT}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  user-mgmt-postgres:
    image: postgres:17
    platform: ${PLATFORM}
    container_name: user-mgmt-postgres
    environment:
      POSTGRES_DB: ${USER_MGMT_DB_DBNAME}
      POSTGRES_USER: ${USER_MGMT_DB_USER}
      POSTGRES_PASSWORD: ${USER_MGMT_DB_PASSWORD}
    command: -p ${USER_MGMT_DB_PORT}
    ports:
      - "${USER_MGMT_DB_PORT}:${USER_MGMT_DB_PORT}"
    volumes:
      - user_mgmt_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${USER_MGMT_DB_USER} -p ${USER_MGMT_DB_PORT}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  user-mgmt-api:
    image: grumpycatyocollab/user-management-api:latest
    platform: ${PLATFORM}
    container_name: user-mgmt-api
    depends_on:
      user-mgmt-postgres:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
    ports:
      - "${USER_MGMT_API_EXPOSED_PORT}:${USER_MGMT_API_EXPOSED_PORT}"
    environment:
      USER_MGMT_AUTH_KEYSFOLDER: ${USER_MGMT_AUTH_KEYSFOLDER}
      USER_MGMT_AUTH_ACTIVEKID: ${USER_MGMT_AUTH_ACTIVEKID}
      USER_MGMT_DB_HOST: ${USER_MGMT_DB_HOST}
      USER_MGMT_DB_PORT: ${USER_MGMT_DB_PORT}
      USER_MGMT_DB_USER: ${USER_MGMT_DB_USER}
      USER_MGMT_DB_PASSWORD: ${USER_MGMT_DB_PASSWORD}
      USER_MGMT_DB_DBNAME: ${USER_MGMT_DB_DBNAME}
      USER_MGMT_DB_SSLMODE: ${USER_MGMT_DB_SSLMODE}
      USER_MGMT_WEB_API_HOST: ${USER_MGMT_API_HOST}
      USER_MGMT_DISCOVERY_SERVICE_URL: http://discovery-service:8091
      USER_MGMT_DISCOVERY_SERVICE_HOST: user-mgmt-api
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:${USER_MGMT_API_EXPOSED_PORT}/health",
        ]
      timeout: 10s
      interval: 30s
      retries: 3
      start_period: 40s

  inventory-postgres:
    image: postgres:15-alpine
    platform: ${PLATFORM}
    container_name: inventory-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${INVENTORY_SVC_DB_DATABASE:-inventory_db}
      POSTGRES_USER: ${INVENTORY_SVC_DB_USERNAME:-postgres}
      POSTGRES_PASSWORD: ${INVENTORY_SVC_DB_PASSWORD}
    ports:
      - "${INVENTORY_SVC_DB_EXTERNAL_PORT:-5433}:5432"
    volumes:
      - inventory_postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql

  inventory-api:
    image: danielavornic/ghost-hunters-inventory-service:latest
    platform: ${PLATFORM}
    container_name: inventory-api
    restart: unless-stopped
    ports:
      - "${INVENTORY_SVC_PORT:-8088}:${INVENTORY_SVC_PORT:-8088}"
    env_file:
      - .env
    environment:
      INVENTORY_SVC_DB_HOST: inventory-postgres
      INVENTORY_SVC_DB_PORT: 5432
    depends_on:
      - inventory-postgres

  ghost-postgres:
    image: postgres:13-alpine
    container_name: ghost-postgres
    restart: unless-stopped
    command: -p ${GHOST_SVC_DB_PORT:-5436}
    environment:
      POSTGRES_DB: ${GHOST_SVC_DB_NAME:-ghost_db}
      POSTGRES_USER: ${GHOST_SVC_DB_USER:-ghost_user}
      POSTGRES_PASSWORD: ${GHOST_SVC_DB_PASSWORD}
    ports:
      - "${GHOST_SVC_DB_PORT:-5436}:${GHOST_SVC_DB_PORT:-5436}"
    volumes:
      - ghost_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${GHOST_SVC_DB_USER:-ghost_user} -d ${GHOST_SVC_DB_NAME:-ghost_db} -p ${GHOST_SVC_DB_PORT:-5436}"]
      interval: 10s
      timeout: 5s
      retries: 5

  ghost-api:
    image: marinbizzareadventrue/ghost-service:v2.0.0
    platform: ${PLATFORM}
    container_name: ghost-api
    restart: unless-stopped
    ports:
      - "${GHOST_SVC_PORT:-8086}:${GHOST_SVC_PORT:-8086}"
    env_file:
      - .env
    environment:
      - PORT=${GHOST_SVC_PORT:-8086}
      - HOST=${GHOST_SVC_HOST:-0.0.0.0}
      - DB_URL=${GHOST_SVC_DB_URL}
      - GHOST_SVC_DB_HOST=${GHOST_SVC_DB_HOST:-ghost-postgres}
      - GHOST_SVC_DB_PORT=${GHOST_SVC_DB_PORT:-5436}
      - GHOST_SVC_DB_USER=${GHOST_SVC_DB_USER:-ghost_user}
      - GHOST_SVC_DB_PASSWORD=${GHOST_SVC_DB_PASSWORD:-ghostdb123}
      - GHOST_SVC_DB_NAME=${GHOST_SVC_DB_NAME:-ghost_db}
      - ENVIRONMENT=${GHOST_SVC_ENVIRONMENT:-development}
      - DEBUG=${GHOST_SVC_DEBUG:-false}
      - GIN_MODE=${GHOST_SVC_GIN_MODE:-release}
      - LOG_LEVEL=${GHOST_SVC_LOG_LEVEL:-info}
      - MAX_GHOSTS_PER_LOBBY=${GHOST_SVC_MAX_GHOSTS_PER_LOBBY:-1}
      - CONCURRENT_TASK_LIMIT=${CONCURRENT_TASK_LIMIT:-100}
      - TASK_TIMEOUT=${TASK_TIMEOUT:-30}
    depends_on:
      ghost-postgres:
        condition: service_healthy

  location-redis:
    image: redis:7-alpine
    platform: linux/amd64
    container_name: location-redis
    command: redis-server --port 6377
    ports:
      - "6377:6377"
    volumes:
      - location_redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "6377", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  location-api:
    image: marinbizzareadventrue/location-service:latest
    platform: ${PLATFORM}
    container_name: location-api
    restart: unless-stopped
    ports:
      - "${LOCATION_SVC_PORT:-8087}:${LOCATION_SVC_PORT:-8087}"
    env_file:
      - .env
    environment:
      PORT: ${LOCATION_SVC_PORT:-8087}
      REDIS_URL: redis://location-redis:6377/0
      CONCURRENT_TASK_LIMIT: ${CONCURRENT_TASK_LIMIT:-100}
      TASK_TIMEOUT: ${TASK_TIMEOUT:-30}
    depends_on:
      location-redis:
        condition: service_healthy

  chat-mongo:
    image: mongo:7.0
    platform: ${PLATFORM}
    container_name: chat-mongo
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${CHAT_SVC_MONGO_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${CHAT_SVC_MONGO_ROOT_PASSWORD:-password}
      MONGO_INITDB_DATABASE: ${CHAT_SVC_MONGO_DATABASE:-chat-mongo}
    ports:
      - "${CHAT_SVC_MONGO_PORT:-27017}:27017"
    volumes:
      - chat_mongo_data:/data/db
      - chat_mongo_config:/data/configdb

  chat-api:
    image: danielavornic/ghost-hunters-chat-service:latest
    platform: ${PLATFORM}
    container_name: chat-api
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - CHAT_SVC_NODE_ENV=production
      - CHAT_SVC_DATABASE_URL=mongodb://${CHAT_SVC_MONGO_ROOT_USERNAME:-admin}:${CHAT_SVC_MONGO_ROOT_PASSWORD:-password}@chat-mongo:27017/${CHAT_SVC_MONGO_DATABASE:-chat-mongo}?authSource=admin
    ports:
      - "${CHAT_SVC_PORT:-8089}:${CHAT_SVC_PORT:-8089}"
    depends_on:
      - chat-mongo
  
  ghost-ai-redis:
    image: redis:7-alpine
    platform: ${PLATFORM}
    container_name: ghost-ai-redis
    command: redis-server --port ${GHOST_AI_SVC_REDIS_PORT}
    ports:
      - "${GHOST_AI_SVC_REDIS_PORT}:${GHOST_AI_SVC_REDIS_PORT}"
    volumes:
      - ghost_ai_redis_data:/data
    env_file:
      - .env
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "${GHOST_AI_SVC_REDIS_PORT}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  ghost-ai-api:
    image: grumpycatyocollab/ghost-ai-api:latest
    platform: ${PLATFORM}
    container_name: ghost-ai-api
    ports:
      - "${GHOST_AI_SVC_PORT}:${GHOST_AI_SVC_PORT}"
    env_file:
      - .env
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://${GHOST_AI_SVC_HOST}:${GHOST_AI_SVC_PORT}/ghost/session/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - ghost-ai-redis

  map-api:
    image: eduardbalamatiuc/map-service:latest
    platform: ${PLATFORM}
    container_name: map-api
    ports:
      - "${MAP_SERVICE_SERVICE_CONTAINER_PORT}:${MAP_SERVICE_SERVER_PORT}"
    env_file:
      - .env
    environment:
      - MAP_SERVICE_REDIS_HOST=${MAP_SERVICE_REDIS_HOST}
      - MAP_SERVICE_REDIS_PORT=${MAP_SERVICE_REDIS_PORT}
      - MAP_SERVICE_SERVER_PORT=${MAP_SERVICE_SERVER_PORT}
      - MAP_SERVICE_TASK_TIMEOUT=${MAP_SERVICE_TASK_TIMEOUT}
      - MAP_SERVICE_MAX_CONCURRENT_TASKS=${MAP_SERVICE_MAX_CONCURRENT_TASKS}
      - DISCOVERY_SERVICE_URL=http://discovery-service:8091
      - MAP_SERVICE_HOST=map-api
    depends_on:
      map-redis:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:${MAP_SERVICE_SERVER_PORT}/health",
        ]
      timeout: 10s
      interval: 30s
      retries: 3
      start_period: 40s

  map-redis:
    image: redis:7-alpine
    platform: ${PLATFORM}
    container_name: map-redis
    ports:
      - "${MAP_SERVICE_REDIS_PORT}:${MAP_SERVICE_REDIS_PORT}"
    command: redis-server --appendonly yes --port ${MAP_SERVICE_REDIS_PORT}
    volumes:
      - map_redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "${MAP_SERVICE_REDIS_PORT}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  lobby-api:
    image: eduardbalamatiuc/lobby-service:latest
    platform: ${PLATFORM}
    container_name: lobby-api
    ports:
      - "${LOBBY_SERVICE_SERVICE_CONTAINER_PORT}:${LOBBY_SERVICE_SERVER_PORT}"
    env_file:
      - .env
    environment:
      - LOBBY_SERVICE_REDIS_HOST=${LOBBY_SERVICE_REDIS_HOST:-lobby-redis}
      - LOBBY_SERVICE_REDIS_PORT=${LOBBY_SERVICE_REDIS_PORT}
      - LOBBY_SERVICE_SERVER_PORT=${LOBBY_SERVICE_SERVER_PORT}
      - LOBBY_SERVICE_TASK_TIMEOUT=${LOBBY_SERVICE_TASK_TIMEOUT}
      - LOBBY_SERVICE_MAX_CONCURRENT_TASKS=${LOBBY_SERVICE_MAX_CONCURRENT_TASKS}
      - DISCOVERY_SERVICE_URL=http://discovery-service:8091
      - LOBBY_SERVICE_HOST=lobby-api
      - LOBBY_SERVICE_MAP_SERVICE_URL=http://gateway-api:8000/api/v1/internal/map
      - LOBBY_SERVICE_AI_SERVICE_URL=http://gateway-api:8000/api/v1/internal/ai
      - LOBBY_SERVICE_LOCATION_SERVICE_URL=http://gateway-api:8000/api/v1/internal/location
      - LOBBY_SERVICE_JOURNAL_SERVICE_URL=http://gateway-api:8000/api/v1/internal/journal
    depends_on:
      lobby-redis:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:${LOBBY_SERVICE_SERVER_PORT}/health",
        ]
      timeout: 10s
      interval: 30s
      retries: 3
      start_period: 40s

  lobby-redis:
    image: redis:7-alpine
    platform: ${PLATFORM}
    container_name: lobby-redis
    ports:
      - "${LOBBY_SERVICE_REDIS_PORT}:${LOBBY_SERVICE_REDIS_PORT}"
    command: redis-server --appendonly yes --port ${LOBBY_SERVICE_REDIS_PORT}
    volumes:
      - lobby_redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "${LOBBY_SERVICE_REDIS_PORT}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  journal-redis:
    image: redis:latest
    platform: ${PLATFORM}
    container_name: journal-redis
    command: redis-server --save 20 1 --loglevel notice --requirepass ${JOURNAL_SERVICE_REDIS_PASSWORD} --port ${JOURNAL_SERVICE_REDIS_CONTAINER_PORT}
    ports:
      - "${JOURNAL_SERVICE_REDIS_HOST_PORT}:${JOURNAL_SERVICE_REDIS_CONTAINER_PORT}"
    volumes:
      - journal_redis_data:/data
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -p ${JOURNAL_SERVICE_REDIS_CONTAINER_PORT} -a ${JOURNAL_SERVICE_REDIS_PASSWORD} ping | grep PONG"]
      interval: 10s
      timeout: 5s
      retries: 3

  journal-api:
    image: ghenntoggy/journal-service:latest
    platform: ${PLATFORM}
    container_name: journal-api
    ports:
      - "${JOURNAL_SERVICE_GO_LOCAL_PORT}:${JOURNAL_SERVICE_GO_CONTAINER_PORT}"
    env_file:
      - .env
    environment:
      - GATEWAY_SERVICE_BASE_URL=${GATEWAY_SERVICE_INTERNAL_BASE_URL}
    restart: on-failure
    depends_on:
      journal-redis:
        condition: service_healthy

  shop-api:
    image: ghenntoggy/shop-service:latest
    platform: ${PLATFORM}
    container_name: shop-api
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - "${SHOP_SERVICE_NEST_LOCAL_PORT}:${SHOP_SERVICE_NEST_CONTAINER_PORT}"
    depends_on:
      shop-postgres:
        condition: service_healthy

  shop-postgres:
    image: postgres:17
    platform: ${PLATFORM}
    container_name: shop-postgres
    restart: always
    command: -p ${SHOP_SERVICE_DB_PORT}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${SHOP_SERVICE_POSTGRES_USER} -d ${SHOP_SERVICE_POSTGRES_DB} -p ${SHOP_SERVICE_DB_PORT}"]
      interval: 10s
      timeout: 3s
      retries: 5
    volumes:
      - shop_postgres_data:/var/lib/postgresql/data
    env_file:
      - .env
    environment:
      - POSTGRES_DB=${SHOP_SERVICE_POSTGRES_DB}
      - POSTGRES_USER=${SHOP_SERVICE_POSTGRES_USER}
      - POSTGRES_PASSWORD=${SHOP_SERVICE_POSTGRES_PASSWORD}
    ports:
      - "${SHOP_SERVICE_LOCAL_DB_PORT}:${SHOP_SERVICE_DB_PORT}"

  # Discovery Service
  discovery-redis:
    image: redis:8.2.1-alpine
    platform: ${PLATFORM}
    container_name: discovery-redis
    ports:
      - "6391:6379"
    command: redis-server --appendonly yes
    volumes:
      - discovery_redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  discovery-service:
    image: eduardbalamatiuc/discovery-service:latest
    platform: ${PLATFORM}
    container_name: discovery-service
    ports:
      - "8091:8091"
    environment:
      - DISCOVERY_SERVICE_HOST=0.0.0.0
      - DISCOVERY_SERVICE_PORT=8091
      - DISCOVERY_SERVICE_REDIS_HOST=discovery-redis
      - DISCOVERY_SERVICE_REDIS_PORT=6379
      - SERVICE_TTL=300
      - HEALTH_CHECK_INTERVAL=30
      - HEALTH_CHECK_TIMEOUT=10
      - MAX_HEALTH_CHECK_FAILURES=3
      - LOG_LEVEL=INFO
      - ENVIRONMENT=development
    depends_on:
      discovery-redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8091/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  user_mgmt_postgres_data:
  gateway_redis_data:
  inventory_postgres_data:
  ghost_postgres_data:
  location_redis_data:
  chat_mongo_data:
  chat_mongo_config:
  ghost_ai_redis_data:
  map_redis_data:
  lobby_redis_data:
  journal_redis_data:
  shop_postgres_data:
  discovery_redis_data:
