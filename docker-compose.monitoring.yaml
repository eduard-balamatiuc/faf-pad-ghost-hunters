services:
  postgres_inventory_service:
    image: postgres:15-alpine
    platform: linux/amd64
    container_name: ghost-hunters_inventory_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${INVENTORY_SVC_DB_DATABASE:-inventory_db}
      POSTGRES_USER: ${INVENTORY_SVC_DB_USERNAME:-postgres}
      POSTGRES_PASSWORD: ${INVENTORY_SVC_DB_PASSWORD}
    ports:
      - "${INVENTORY_SVC_DB_EXTERNAL_PORT:-5433}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - ghost_hunters_network

  inventory-service:
    image: danielavornic/ghost-hunters-inventory-service:latest
    platform: linux/amd64
    container_name: ghost_hunters_inventory_service
    restart: unless-stopped
    ports:
      - "${INVENTORY_SVC_PORT:-8088}:${INVENTORY_SVC_PORT:-8088}"
    env_file:
      - .env
    environment:
      - INVENTORY_SVC_DB_HOST=postgres_inventory_service
      - INVENTORY_SVC_DB_PORT=5432
    depends_on:
      - postgres_inventory_service
    networks:
      - ghost_hunters_network

  ghost-postgres:
    image: postgres:13-alpine
    platform: linux/amd64
    container_name: ghost_hunters_ghost_postgres
    restart: unless-stopped
    command: -p ${GHOST_SVC_DB_PORT:-5436}
    environment:
      POSTGRES_DB: ${GHOST_SVC_DB_NAME:-ghost_db}
      POSTGRES_USER: ${GHOST_SVC_DB_USER:-ghost_user}
      POSTGRES_PASSWORD: ${GHOST_SVC_DB_PASSWORD}
    ports:
      - "${GHOST_SVC_DB_PORT:-5436}:${GHOST_SVC_DB_PORT:-5436}"
    volumes:
      - postgres_ghost_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${GHOST_SVC_DB_USER:-ghost_user} -d ${GHOST_SVC_DB_NAME:-ghost_db} -p ${GHOST_SVC_DB_PORT:-5436}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ghost_hunters_network

  ghost-service:
    image: marinbizzareadventrue/ghost-service:v2.0.0
    pull_policy: always
    platform: linux/amd64
    container_name: ghost_hunters_ghost_service
    restart: unless-stopped
    ports:
      - "${GHOST_SVC_PORT:-8086}:${GHOST_SVC_PORT:-8086}"
    env_file:
      - .env
    environment:
      - PORT=${GHOST_SVC_PORT:-8086}
      - HOST=${GHOST_SVC_HOST:-0.0.0.0}
      - DB_URL=${GHOST_SVC_DB_URL}
      - GHOST_SVC_DB_HOST=${GHOST_SVC_DB_HOST:-ghost-postgres}
      - GHOST_SVC_DB_PORT=${GHOST_SVC_DB_PORT:-5436}
      - GHOST_SVC_DB_USER=${GHOST_SVC_DB_USER:-ghost_user}
      - GHOST_SVC_DB_PASSWORD=${GHOST_SVC_DB_PASSWORD:-ghostdb123}
      - GHOST_SVC_DB_NAME=${GHOST_SVC_DB_NAME:-ghost_db}
      - ENVIRONMENT=${GHOST_SVC_ENVIRONMENT:-development}
      - DEBUG=${GHOST_SVC_DEBUG:-false}
      - GIN_MODE=${GHOST_SVC_GIN_MODE:-release}
      - LOG_LEVEL=${GHOST_SVC_LOG_LEVEL:-info}
      - MAX_GHOSTS_PER_LOBBY=${GHOST_SVC_MAX_GHOSTS_PER_LOBBY:-1}
      - CONCURRENT_TASK_LIMIT=${CONCURRENT_TASK_LIMIT:-100}
      - TASK_TIMEOUT=${TASK_TIMEOUT:-30}
    depends_on:
      ghost-postgres:
        condition: service_healthy
    networks:
      - ghost_hunters_network

  loki:
    image: grafana/loki:2.9.0
    container_name: ghost_hunters_loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - ./loki-config.yml:/etc/loki/local-config.yaml
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - ghost_hunters_network

  promtail:
    image: grafana/promtail:2.9.0
    container_name: ghost_hunters_promtail
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./promtail-config.yml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    networks:
      - ghost_hunters_network

  prometheus:
    image: prom/prometheus:v3.7.2
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
    ports:
      - "9090:9090"
    networks:
      - ghost_hunters_network

  grafana:
    image: grafana/grafana:9.0.0
    container_name: ghost_hunters_grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/var/lib/grafana/dashboards/ghost-hunters-dashboard.json
    env_file:
      - .env
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
      - ./grafana-dashboard.json:/var/lib/grafana/dashboards/ghost-hunters-dashboard.json:ro
      - ./grafana-dashboards-provisioning.yml:/etc/grafana/provisioning/dashboards/dashboards.yml
    ports:
      - "3000:3000"
    depends_on:
      - loki
      - prometheus
    networks:
      - ghost_hunters_network

volumes:
  postgres_data:
  prometheus-data:
  grafana-data:
  postgres_ghost_data:
  loki_data:

networks:
  ghost_hunters_network:
