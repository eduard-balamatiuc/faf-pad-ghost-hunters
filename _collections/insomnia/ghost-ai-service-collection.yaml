type: collection.insomnia.rest/5.0
name: ghost-ai-service-collection
meta:
  id: wrk_8b039bca533a4a47a06e7fa2b83b9b87
  created: 1758910744129
  modified: 1758921691515
  description: ""
collection:
  - name: Ghost AI Service
    meta:
      id: fld_f49a72371f75479288e2518b494d2301
      created: 1758910744130
      modified: 1758921676832
      sortKey: -1758910743074
      description: >-
        Ghost AI Service API endpoints for the Ghost Hunters game. This service
        manages ghost behavior, activity generation, and sanity-based AI
        responses.


        ## Base URL

        - Local Development: `http://localhost:8081`

        - Docker: `http://localhost:8081`


        ## Features

        - Start/stop ghost AI sessions

        - Monitor ghost activities and behavior

        - Sanity-based dynamic AI responses

        - Support for multiple ghost types (Demon, Poltergeist, Spirit, Wraith)
    children:
      - name: Ghost AI Management
        meta:
          id: fld_5dabca803ca14460a65d28d1f1c8fad0
          created: 1758910744130
          modified: 1758921676832
          sortKey: -1758910743073
          description: Core endpoints for managing ghost AI sessions - starting and
            stopping ghost behavior threads.
        children:
          - url: "{{baseUrl}}/ai/start"
            name: Start Ghost AI Session
            meta:
              id: req_2590b211caac49a6804fcd0a75602129
              created: 1758910744130
              modified: 1758910744130
              isPrivate: false
              description: >-
                Starts a new ghost AI session for the specified lobby. This
                initializes a ghost thread that will generate activities based
                on ghost type, difficulty, and player sanity levels.


                **Ghost Types Available:**

                - `demon`: Most aggressive, high hunting probability

                - `poltergeist`: Object manipulation focus

                - `spirit`: Evidence-focused behavior

                - `wraith`: Stealth and mobility


                **Difficulty Levels:**

                - `easy`: 15-second activity intervals

                - `medium`: 10-second activity intervals  

                - `hard`: 5-second activity intervals
              sortKey: -1758910743072
            method: POST
            body:
              mimeType: text/plain
              text: |-
                {
                  "lobbyId": "lobby_demo_001",
                  "hostId": "player_host_demo",
                  "mapId": "farmhouse_classic_001",
                  "difficulty": "medium",
                  "ghostType": "demon",
                  "session": "active",
                  "players": ["player_001", "player_002", "player_003"]
                }
            headers:
              - name: Content-Type
                value: application/json
            scripts:
              afterResponse: >-
                insomnia.test("Status code is 200", function () {
                    insomnia.response.to.have.status(200);
                });


                insomnia.test("Response has required fields", function () {
                    const jsonData = insomnia.response.json();
                    insomnia.expect(jsonData).to.have.property('status');
                    insomnia.expect(jsonData).to.have.property('ghostThreadId');
                    insomnia.expect(jsonData).to.have.property('lobbyId');
                });


                insomnia.test("Status is started", function () {
                    const jsonData = insomnia.response.json();
                    insomnia.expect(jsonData.status).to.equal('started');
                });


                // Store lobbyId for subsequent requests

                const jsonData = insomnia.response.json();

                insomnia.collectionVariables.set("lobbyId", jsonData.lobbyId);

                insomnia.collectionVariables.set("ghostThreadId",
                jsonData.ghostThreadId);
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: "{{baseUrl}}/ai/start"
            name: Start Ghost AI - Poltergeist Easy
            meta:
              id: req_2afcd0ab68164db3943b3f60ffbd17d2
              created: 1758910744131
              modified: 1758910744131
              isPrivate: false
              description: Example of starting a Poltergeist ghost on easy difficulty.
                Poltergeists focus on object manipulation and electrical
                interference.
              sortKey: -1758910743071
            method: POST
            body:
              mimeType: text/plain
              text: |-
                {
                  "lobbyId": "lobby_poltergeist_001",
                  "hostId": "player_host_002",
                  "mapId": "asylum_basement_001",
                  "difficulty": "easy",
                  "ghostType": "poltergeist",
                  "session": "active",
                  "players": ["player_004", "player_005"]
                }
            headers:
              - name: Content-Type
                value: application/json
            scripts:
              afterResponse: >-
                insomnia.test("Status code is 200", function () {
                    insomnia.response.to.have.status(200);
                });


                insomnia.test("Ghost type is reflected in response", function ()
                {
                    const jsonData = insomnia.response.json();
                    insomnia.expect(jsonData.status).to.equal('started');
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: "{{baseUrl}}/ai/start"
            name: Start Ghost AI - Wraith Hard
            meta:
              id: req_94a6853309cf42e6b422d956e1be3ecd
              created: 1758910744131
              modified: 1758910744131
              isPrivate: false
              description: High-difficulty Wraith ghost session. Wraiths have enhanced
                mobility, teleportation abilities, and leave no footprints.
              sortKey: -1758910743070
            method: POST
            body:
              mimeType: text/plain
              text: >-
                {
                  "lobbyId": "lobby_wraith_hard_001",
                  "hostId": "player_expert_001",
                  "mapId": "hospital_nightmare_001",
                  "difficulty": "hard",
                  "ghostType": "wraith",
                  "session": "active",
                  "players": ["player_pro_001", "player_pro_002", "player_pro_003", "player_pro_004"]
                }
            headers:
              - name: Content-Type
                value: application/json
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: "{{baseUrl}}/ai/end"
            name: End Ghost AI Session
            meta:
              id: req_d8b19a84103440aaa847a0d6af1fc179
              created: 1758910744131
              modified: 1758910744131
              isPrivate: false
              description: Terminates an active ghost AI session. This stops the ghost
                behavior loop and marks the session as terminated.
              sortKey: -1758910743069
            method: POST
            body:
              mimeType: text/plain
              text: |-
                {
                  "lobbyId": "{{lobbyId}}"
                }
            headers:
              - name: Content-Type
                value: application/json
            scripts:
              afterResponse: >-
                insomnia.test("Status code is 200", function () {
                    insomnia.response.to.have.status(200);
                });


                insomnia.test("Session terminated successfully", function () {
                    const jsonData = insomnia.response.json();
                    insomnia.expect(jsonData.status).to.equal('terminated');
                    insomnia.expect(jsonData.lobbyId).to.equal(insomnia.collectionVariables.get('lobbyId'));
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
      - name: Ghost Monitoring
        meta:
          id: fld_bae0d36f1dc4429fa58e9f02d3ba7bf1
          created: 1758910744132
          modified: 1758910744132
          sortKey: -1758910743068
          description: Endpoints for monitoring ghost behavior, activities, and session
            status.
        children:
          - url: "{{baseUrl}}/ghost/activities/{{lobbyId}}"
            name: Get Ghost Activities
            meta:
              id: req_2abfd6ebdeaf480890680a3fcf0480a6
              created: 1758910744132
              modified: 1758910744132
              isPrivate: false
              description: >-
                Retrieves all ghost activities for a specific lobby. Activities
                include detailed information about ghost behavior, sanity
                influence, evidence types, and targeting information.


                **Activity Types Include:**

                - `hunt_started/hunt_ended`: Hunting phases

                - `object_thrown`: Physical manifestations

                - `temperature_drop`: Environmental changes

                - `emf_spike`: Electromagnetic disturbances

                - `player_stalking`: Targeted behavior (low sanity)

                - `sanity_drain`: Active sanity reduction
              sortKey: -1758910743067
            method: GET
            scripts:
              afterResponse: >-
                insomnia.test("Status code is 200", function () {
                    insomnia.response.to.have.status(200);
                });


                insomnia.test("Response has activities array", function () {
                    const jsonData = insomnia.response.json();
                    insomnia.expect(jsonData).to.have.property('activities');
                    insomnia.expect(jsonData).to.have.property('total');
                    insomnia.expect(jsonData).to.have.property('lobbyId');
                });


                insomnia.test("Activities have required fields", function () {
                    const jsonData = insomnia.response.json();
                    if (jsonData.activities.length > 0) {
                        const activity = jsonData.activities[0];
                        insomnia.expect(activity).to.have.property('id');
                        insomnia.expect(activity).to.have.property('activityType');
                        insomnia.expect(activity).to.have.property('description');
                        insomnia.expect(activity).to.have.property('timestamp');
                        insomnia.expect(activity).to.have.property('metadata');
                    }
                });


                insomnia.test("Sanity influence is tracked", function () {
                    const jsonData = insomnia.response.json();
                    if (jsonData.activities.length > 0) {
                        const activity = jsonData.activities[0];
                        if (activity.metadata) {
                            insomnia.expect(activity.metadata).to.have.property('sanityInfluenced');
                            insomnia.expect(activity.metadata).to.have.property('avgSanity');
                            insomnia.expect(activity.metadata).to.have.property('intensity');
                        }
                    }
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: "{{baseUrl}}/ghost/activities/lobby_poltergeist_001"
            name: Get Ghost Activities - Poltergeist
            meta:
              id: req_316507568635494b9627fca01ebfb462
              created: 1758910744132
              modified: 1758910744132
              isPrivate: false
              description: Monitor activities for the Poltergeist session. Poltergeist
                activities focus heavily on object manipulation.
              sortKey: -1758910743066
            method: GET
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: "{{baseUrl}}/ghost/session/{{lobbyId}}"
            name: Get Ghost Session Status
            meta:
              id: req_7c84918ab3b9476dbbb06c4f31d4db92
              created: 1758910744133
              modified: 1758910744133
              isPrivate: false
              description: |-
                Gets the current status of a ghost session including:
                - Session metadata (ID, lobby, ghost type, difficulty)
                - Current room location
                - Hunting mode status
                - Last activity timestamp
                - Player list
              sortKey: -1758910743065
            method: GET
            scripts:
              afterResponse: |-
                insomnia.test("Status code is 200", function () {
                    insomnia.response.to.have.status(200);
                });

                insomnia.test("Session data is complete", function () {
                    const jsonData = insomnia.response.json();
                    insomnia.expect(jsonData).to.have.property('session');
                    
                    const session = jsonData.session;
                    insomnia.expect(session).to.have.property('id');
                    insomnia.expect(session).to.have.property('lobbyId');
                    insomnia.expect(session).to.have.property('ghostType');
                    insomnia.expect(session).to.have.property('difficulty');
                    insomnia.expect(session).to.have.property('status');
                    insomnia.expect(session).to.have.property('huntingMode');
                    insomnia.expect(session).to.have.property('currentRoom');
                });

                insomnia.test("Session has timestamp fields", function () {
                    const jsonData = insomnia.response.json();
                    const session = jsonData.session;
                    insomnia.expect(session).to.have.property('createdAt');
                    insomnia.expect(session).to.have.property('lastActivity');
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: "{{baseUrl}}/ghost/session/non_existent_lobby"
            name: Get Non-Existent Session (404)
            meta:
              id: req_ddaa783e813c44a9b10114989152b366
              created: 1758910744133
              modified: 1758910744133
              isPrivate: false
              description: Test error handling for non-existent ghost sessions. Should return
                404 with proper error format.
              sortKey: -1758910743064
            method: GET
            scripts:
              afterResponse: |-
                insomnia.test("Status code is 404", function () {
                    insomnia.response.to.have.status(404);
                });

                insomnia.test("Error response format", function () {
                    const jsonData = insomnia.response.json();
                    insomnia.expect(jsonData).to.have.property('error');
                    insomnia.expect(jsonData).to.have.property('message');
                    insomnia.expect(jsonData.error).to.equal('NOT_FOUND');
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
      - name: Integration Tests
        meta:
          id: fld_45ab8c5cfdc54d3399caa2b88cd366c5
          created: 1758910744133
          modified: 1758910744133
          sortKey: -1758910743063
          description: Integration tests that validate the complete ghost AI workflow.
        children:
          - name: Full Workflow Test
            meta:
              id: fld_e24cf77d630d4e8ea174ccf34b7e27b2
              created: 1758910744133
              modified: 1758910744133
              sortKey: -1758910743062
              description: Complete workflow test that starts a session, monitors it, and ends
                it.
            children:
              - url: "{{baseUrl}}/ai/end"
                name: 4. End Session
                meta:
                  id: req_9886b7362143451097c3e469c8686593
                  created: 1758910744134
                  modified: 1758910744134
                  isPrivate: false
                  description: ""
                  sortKey: -1758910743058
                method: POST
                body:
                  mimeType: text/plain
                  text: |-
                    {
                      "lobbyId": "integration_test_lobby"
                    }
                headers:
                  - name: Content-Type
                    value: application/json
                scripts:
                  afterResponse: |-
                    insomnia.test("Session ended successfully", function () {
                        insomnia.response.to.have.status(200);
                        const jsonData = insomnia.response.json();
                        insomnia.expect(jsonData.status).to.equal('terminated');
                    });
                settings:
                  renderRequestBody: true
                  encodeUrl: true
                  followRedirects: global
                  cookies:
                    send: true
                    store: true
                  rebuildPath: true
              - url: "{{baseUrl}}/ghost/session/integration_test_lobby"
                name: 2. Check Session Status
                meta:
                  id: req_ccf43d5129f14d739ff586c9d24c70b4
                  created: 1758910744134
                  modified: 1758910744134
                  isPrivate: false
                  description: ""
                  sortKey: -1758910743060
                method: GET
                scripts:
                  afterResponse: >-
                    insomnia.test("Session is active", function () {
                        insomnia.response.to.have.status(200);
                        const jsonData = insomnia.response.json();
                        insomnia.expect(jsonData.session.status).to.equal('active');
                        insomnia.expect(jsonData.session.ghostType).to.equal('demon');
                    });
                settings:
                  renderRequestBody: true
                  encodeUrl: true
                  followRedirects: global
                  cookies:
                    send: true
                    store: true
                  rebuildPath: true
              - url: "{{baseUrl}}/ghost/activities/integration_test_lobby"
                name: 3. Monitor Activities (Wait 5s)
                meta:
                  id: req_d313e85fec474ce79a3809b5eee40a5e
                  created: 1758910744134
                  modified: 1758910744134
                  isPrivate: false
                  description: ""
                  sortKey: -1758910743059
                method: GET
                scripts:
                  preRequest: |-
                    // Wait 5 seconds for activities to generate
                    setTimeout(() => {}, 5000);
                  afterResponse: >-
                    insomnia.test("Activities generated", function () {
                        insomnia.response.to.have.status(200);
                        const jsonData = insomnia.response.json();
                        insomnia.expect(jsonData.total).to.be.at.least(1);
                        insomnia.expect(jsonData.activities).to.be.an('array');
                    });


                    insomnia.test("Demon activities present", function () {
                        const jsonData = insomnia.response.json();
                        if (jsonData.activities.length > 0) {
                            const hasHuntingActivity = jsonData.activities.some(a => 
                                a.activityType.includes('hunt') || 
                                a.activityType.includes('aggressive')
                            );
                            // Demons should show aggressive behavior
                        }
                    });
                settings:
                  renderRequestBody: true
                  encodeUrl: true
                  followRedirects: global
                  cookies:
                    send: true
                    store: true
                  rebuildPath: true
              - url: "{{baseUrl}}/ai/start"
                name: 1. Start Session
                meta:
                  id: req_d566fb795372427c9614d9b5347e7d67
                  created: 1758910744134
                  modified: 1758910744134
                  isPrivate: false
                  description: ""
                  sortKey: -1758910743061
                method: POST
                body:
                  mimeType: text/plain
                  text: |-
                    {
                      "lobbyId": "integration_test_lobby",
                      "hostId": "integration_host",
                      "mapId": "test_map_001",
                      "difficulty": "hard",
                      "ghostType": "demon",
                      "session": "active",
                      "players": ["test_player_001", "test_player_002"]
                    }
                headers:
                  - name: Content-Type
                    value: application/json
                scripts:
                  afterResponse: |-
                    insomnia.test("Session started successfully", function () {
                        insomnia.response.to.have.status(200);
                        const jsonData = insomnia.response.json();
                        insomnia.expect(jsonData.status).to.equal('started');
                    });

                    // Wait for ghost activities to generate
                    setTimeout(() => {}, 2000);
                settings:
                  renderRequestBody: true
                  encodeUrl: true
                  followRedirects: global
                  cookies:
                    send: true
                    store: true
                  rebuildPath: true
      - name: Performance Tests
        meta:
          id: fld_fcf848f765ad45df8599c64ac6491c79
          created: 1758910744134
          modified: 1758910744134
          sortKey: -1758910743057
          description: Performance and stress testing endpoints.
        children:
          - url: "{{baseUrl}}/ai/start"
            name: Concurrent Sessions Test
            meta:
              id: req_a62432dd443c42cca67c54a82151e7a2
              created: 1758910744135
              modified: 1758910744135
              isPrivate: false
              description: Stress test with random data. Run this multiple times concurrently
                to test the service's ability to handle multiple ghost sessions.
              sortKey: -1758910743056
            method: POST
            body:
              mimeType: text/plain
              text: >-
                {
                  "lobbyId": "stress_test_{% faker 'randomInt' %}",
                  "hostId": "stress_host_{% faker 'randomInt' %}",
                  "mapId": "stress_map_{% faker 'randomInt' %}",
                  "difficulty": "{{$randomArrayElement(['easy', 'medium', 'hard']}}",
                  "ghostType": "{{$randomArrayElement(['demon', 'poltergeist', 'spirit', 'wraith'])}}",
                  "session": "active",
                  "players": ["stress_p1_{% faker 'randomInt' %}", "stress_p2_{% faker 'randomInt' %}"]
                }
            headers:
              - name: Content-Type
                value: application/json
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
    scripts:
      preRequest: >-
        // Global pre-request script

        console.log('Making request to Ghost AI Service...');


        // Set timestamp for request tracking

        insomnia.collectionVariables.set('requestTimestamp', new
        Date().toISOString());
      afterResponse: >-
        // Global test script for all requests

        insomnia.test('Response time is acceptable', function () {
            insomnia.expect(insomnia.response.responseTime).to.be.below(5000);
        });


        insomnia.test('Content-Type is JSON', function () {
            insomnia.expect(insomnia.response.headers.get('Content-Type')).to.include('application/json');
        });


        // Log response for debugging

        console.log('Response Status:', insomnia.response.status);

        console.log('Response Time:', insomnia.response.responseTime + 'ms');
    environment:
      baseUrl: http://localhost:8081
      lobbyId: lobby_demo_001
      ghostThreadId: ""
cookieJar:
  name: Default Jar
  meta:
    id: jar_610716b06a610223ae657e188c3a23e7a539bbb8
    created: 1758910745499
    modified: 1758921676830
environments:
  name: Base Environment
  meta:
    id: env_610716b06a610223ae657e188c3a23e7a539bbb8
    created: 1758910744135
    modified: 1758921676832
    isPrivate: false
  data:
    requestTimestamp: 2025-09-26T21:21:16.732Z
    lobbyId: lobby_demo_001
    ghostThreadId: c02a49b4-11b1-4a3f-a97c-6b9683fc236c
